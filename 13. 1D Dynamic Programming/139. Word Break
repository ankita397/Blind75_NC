https://leetcode.com/problems/word-break/description/


//Recursion - TLE
//TC - O(2^n)
//SC - O(n) - recursive stack

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordSet = new HashSet<String>(wordDict);// Convert list to set for O(1) lookups
        return canBreak(0, s, wordSet);
    }
    /**
     * Recursively checks if the substring from current index 'start' can be broken using valid words.
     * Tries all prefixâ€“suffix splits at each position.
     */
    private boolean canBreak(int start, String s, Set<String> wordSet){
        // Base Case: If start reached end of string, successful segmentation - empty segmentation possible
        if(start == s.length()){
            return true;
        }
        // Try every possible prefix word from starting at index
        for(int end = start+1; end <= s.length(); end++){ // end=start+1 - l,le,lee,leet,...leetcode
            // Get the substring from start to end 
            String prefix = s.substring(start, end);// prefix = current word candidate
            // suffix = s[end..] (we will check this by recursive call)

            if(wordSet.contains(prefix)){
                // If prefix is valid and suffix can be segmented, return true
                // So, for suffix, we check segmentation possibility using recursion
                if (canBreak(end, s, wordSet)) {
                    return true;
                }
            }
        }
        // No valid segmentation found
        return false;
    }
}

//Memoization
//TC - O(n*n) = O(n^2) - loop length * recursion stack length
//SC - O(n) - recursive stack
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordSet = new HashSet<>(wordDict);
        Boolean[] dp = new Boolean[s.length()];// can't be boolean as we need comparison with null
        return canBreak(0,s, wordSet, dp);
    }
    private boolean canBreak(int start, String s, Set<String> wordSet, Boolean[] dp){
        //end of string s
        if(start == s.length()){
            return true;
        }
        // If already computed, return cached result
        if(dp[start] != null){
            return dp[start];
        }
        // Try all possible prefixes starting at xv
        for(int end = start+1; end <= s.length(); end++){
            String prefix = s.substring(start, end);// prefix = current word
            if(wordSet.contains(prefix)){
                // If prefix is valid and suffix can be segmented
                if(canBreak(end, s, wordSet, dp)){
                    dp[start] = true;
                    return true;
                }
            }
        }
        // Mark as false if no segmentation possible
        dp[start] = false;
        return false;
    }
}

//Tabulation - may not be needed, good to know
//TC - O(n^2) - loops
//SC - O(n) - dp array
class Solution {
    /* ðŸ’¡ Dry Run (s = "applepenapple", wordDict = ["apple", "pen"]):
     * dp[0] = true  â†’ base case: empty string is segmentable
     *
     * i = 1:
     *   Try s[0..1) = "a" â†’ not in wordDict â†’ dp[1] = false
     *
     * i = 5:
     *   Try s[0..5) = "apple" âˆˆ wordDict, dp[0] = true â†’ dp[5] = true
     *
     * i = 8:
     *   Try s[5..8) = "pen" âˆˆ wordDict, dp[5] = true â†’ dp[8] = true
     *
     * i = 13:
     *   Try s[8..13) = "apple" âˆˆ wordDict, dp[8] = true â†’ dp[13] = true
     *
     * Final Answer: dp[13] = true â†’ The string can be segmented*/
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordSet = new HashSet<>(wordDict);
        //Create a dp array where dp[i] is true if s[0..i) can be segmented
        // into dictionary words.
        boolean[] dp = new boolean[s.length()+1]; // can be boolean as we do not need comparison with null
        
        // Base case: Empty string can always be segmented (dp[0] = true)
        dp[0] = true;
        
        //Fill the dp array from left to right
        // Loop through all prefixes s[0..i)
        for(int i = 1; i <= s.length(); i++){
            // Check all possible split points j such that s[0..j) + s[j..i)
            // Try every possible word ending at index i
            // So j goes from 0 to i-1
            for(int j = 0; j < i; j++){
                // s[j..i) is the current word to check
                String currentWord = s.substring(j, i);
               
                // Now check:
                // 1. dp[j] is true â†’ means s[0..j) can be broken using dictionary
                // 2. wordSet.contains(word) â†’ means s[j..i) is a valid word
                if(dp[j] && wordSet.contains(currentWord)){
                    dp[i] = true;  // So s[0..i) can also be segmented
                    break;         // No need to check further j values for this i
                }
            }
        }
        //The answer is whether the full string s[0..n) can be segmented
        return dp[s.length()] ;
    }
}

