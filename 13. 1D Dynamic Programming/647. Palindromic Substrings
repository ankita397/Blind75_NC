https://leetcode.com/problems/palindromic-substrings/description/


//Brute Force -  no need to code
//Same logic as 5. Longest Palindromic Substring
//Generate all substrings and check for palindromes. Time Complexity: O(nÂ³), Space Complexity: O(n)
//The key idea behind checking if a string (or a substring) is a palindrome is to compare the characters at the outermost positions first, 
and then move inward to check the next pair of characters, and so on.

class Solution {
    public int countSubstrings(String s) {
        int count = 0;
        // for each combination of i (start) and j (end), you get a substring s[i...j].
        for(int i = 0; i < s.length(); i++){
            for(int j = i; j < s.length(); j++){
                if(isPalindrome(s, i, j)){
                    count+=1;
                }
            }
        } 
        return count;
    }

    private boolean isPalindrome(String s, int left, int right){
        while(left < right){
            if(s.charAt(left) != s.charAt(right)){
                return false;
            }
            left++; //move inward
            right--; // move inward
        }
        return true;
    }
}
