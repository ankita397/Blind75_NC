https://leetcode.com/problems/palindromic-substrings/description/


//Brute Force -  no need to code
//Same logic as 5. Longest Palindromic Substring
//Generate all substrings and check for palindromes. 
//The key idea behind checking if a string (or a substring) is a palindrome is to compare the characters at the outermost positions first, 
and then move inward to check the next pair of characters, and so on.


Time Complexity: O(nÂ³), 
Space Complexity: O(1)  // we just return count and not substring

class Solution {
    public int countSubstrings(String s) {
        int count = 0;
        // for each combination of i (start) and j (end), you get a substring s[i...j].
        for(int i = 0; i < s.length(); i++){
            for(int j = i; j < s.length(); j++){
                if(isPalindrome(s, i, j)){
                    count+=1;
                }
            }
        } 
        return count;
    }

    private boolean isPalindrome(String s, int left, int right){
        while(left < right){
            if(s.charAt(left) != s.charAt(right)){
                return false;
            }
            left++; //move inward
            right--; // move inward
        }
        return true;
    }
}

//Approach - DP - Memoization
//TC = O(n^2) 
//SC = O(n^2)

class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        
        // dp[i][j] will be true if s[i...j] is a palindrome
        boolean[][] dp = new boolean[n][n];
        
        int count = 0;
        
        // Outer loop: Iterate over all possible starting indices (i)
        for (int i = n - 1; i >= 0; i--) {
            // Inner loop: Iterate over all possible ending indices (j) starting from i
            for (int j = i; j < n; j++) {
                // If the characters at the start and end are the same
                if (s.charAt(i) == s.charAt(j)) {
                    // If the length of the substring is 1 or 2, it's a palindrome
                    // Or if the inner substring (s[i+1...j-1]) is a palindrome, it's a palindrome
                    if (j - i <= 1 || dp[i + 1][j - 1]) {
                        dp[i][j] = true;  // Mark this substring as a palindrome
                        count++;  // Increment count of palindromic substrings
                    }
                }
            }
        }
        
        return count;
    }
}

