https://leetcode.com/problems/house-robber/description/

https://www.youtube.com/watch?v=GrMBfJNk_NY

Approach - DP - Recursion -> Memoization -> Tabulation -> Space optimization

//1. Express everything in terms of index
//2. Try all possible ways
//3. Find max amount robbed
//4. Base case

class Solution {
    public int rob(int[] nums) {
        //Recursion - TC = O(2^n) - TLE
        /*int n = nums.length;;
        return maxAmountRobbed(n-1, nums);//start from n-1 always for recursion - top down
        */

        //Memoization - TC = O(n), SC = O(n)+ O(n)
        /*int n = nums.length;
        int[] dp = new int[n+1];
        for(int i = 0; i < n; i++){
            dp[i] = -1;
        }
        return maxAmountRobbed(dp, n-1, nums);*/

        //Tabulation - TC = O(n), SC = O(n)
        /*int n = nums.length;
        int[] dp = new int[n+1];
        dp[0] = nums[0];
        // if ind < 0, we cannot handle it here.. we do it later
        int robbed = 0;
        int notRobbed = 0 ;
        for(int ind = 1; ind < n; ind++){
            
            //if negative i.e., i <= 1, dp[1-2]=dp[-1] should not be added
            robbed = nums[ind];
            if(ind > 1){
                robbed = robbed + dp[ind-2];
            }
            notRobbed = 0 + dp[ind-1]; 
            dp[ind] = Math.max(robbed, notRobbed);
        }
        return dp[n-1];*/

        //Space Optimization // TC = O(n), SC = O(1)
        int n = nums.length;
        int prev = nums[0];
        int prev2 = 0;

        int robbed = 0;
        int notRobbed = 0;
        for(int ind = 1; ind < n; ind++){
            int curr = 0;
            robbed = nums[ind];
            if(ind > 1){
                robbed = robbed + prev2;
            }
            notRobbed = 0 + prev;
            curr = Math.max(robbed, notRobbed);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }

    //Recursion
    /*public int maxAmountRobbed(int ind, int[] nums){
        //base
        if(ind == 0){// we pick 0 only if 1 has not been picked
            return nums[ind];
        }
        if(ind < 0){
            return 0;
        }
        int robbed = nums[ind] + maxAmountRobbed(ind-2, nums);
        int notRobbed = 0 + maxAmountRobbed(ind-1, nums);

        return Math.max(robbed, notRobbed);
    }*/

    //Memoization
    /*public int maxAmountRobbed(int[] dp, int ind, int[] nums){
        //base
        if(ind == 0) 
            return nums[ind];
        if(ind < 0)
            return 0;
        if(dp[ind] != -1){
            return dp[ind];
        }

        int robbed = nums[ind] + maxAmountRobbed(dp, ind-2, nums);
        int notRobbed = 0 + maxAmountRobbed(dp, ind-1, nums);

        return dp[ind] = Math.max(robbed, notRobbed);
    }*/
}
