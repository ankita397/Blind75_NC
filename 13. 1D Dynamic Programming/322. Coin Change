https://leetcode.com/problems/coin-change/description/

This can be solved using 1D as well as 2D DP as this is Unbounded Knapsack. [Use 1D]
This is a variation of unbounded knapsack.


1D: Better

//Recursion
//TC = O(n^amount) - TLE
//SC = O(amount)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int res = coinChangeCombo(coins, amount);
        return res == Integer.MAX_VALUE ? -1 : res;
    }

    public int coinChangeCombo(int[] coins, int amount){
        // base cases
        if(amount == 0){
            return 0;
        }
        if(amount < 0)
            return -1;
        
        int minCoins = Integer.MAX_VALUE;
        
        // Try every coin and choose the one with the minimum coins required
        for(int coin : coins){
            int pick = Integer.MAX_VALUE;
            if(coin <= amount){
                // pickCoin = 1 + coinChangeCombo(ind, coins, amount-coins[ind]);
                // the above can cause integer overflow if the recursive call returns Integer.MAX_VALUE. Adding 1 to it wraps it around to a negative number.
                int res = coinChangeCombo(coins, amount - coin);
                if(res != Integer.MAX_VALUE){
                    pick = 1 + res;
                }
            }
            // notPick is implicit in loop by trying other coins
            minCoins = Math.min(minCoins, pick);
        }
        return minCoins;
    }
}

// Memoization (using 1D array)
// TC = O(n * amount)
// SC = O(amount) + recursion stack

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        int n = coins.length;
        for(int i = 0; i <= amount; i++){
            dp[i]= -1;
        }
        int res = coinChangeCombo(coins, amount, dp);
        return res == Integer.MAX_VALUE ? -1 : res;
    }

    public int coinChangeCombo(int[] coins, int amount, int[] dp){
        // base cases
        if(amount == 0){
            return 0;
        }
        if(amount < 0)
            return -1;
        
        if(dp[amount] != -1) 
            return dp[amount];

         int minCoins = Integer.MAX_VALUE;

        for(int coin : coins){
            int pick = Integer.MAX_VALUE;
            if(coin <= amount){
                int res = coinChangeCombo(coins, amount - coin, dp);
                if(res != Integer.MAX_VALUE){
                    pick = 1 + res;
                }
            }
            // notPick is implicit in loop by trying other coins
            minCoins = Math.min(minCoins, pick);
        }
        return dp[amount] = minCoins;
    }
}

// Tabulation (using 1D array)
// TC = O(n * amount)
// SC = O(amount)

class Solution {
    public int coinChange(int[] coins, int amount) {
        // Create a DP array where dp[i] will hold the minimum number of coins
        // needed to make amount 'i'. Initialize it with a large value (infinity).
        int[] dp = new int[amount + 1];
        int n = coins.length;
        for(int i = 0; i <= amount; i++){
            dp[i]= amount+1;
        }

        // Base case: To make amount 0, we need 0 coins.
        dp[0] = 0;

        // Build the solution for all amounts from 1 to 'amount'
        for(int amt = 1; amt <= amount; amt++){
            // Try every coin and update dp[i] accordingly
            for(int coin : coins){
                // Only proceed if the current coin is less than or equal to i
                if(coin <= amt){ 
                    dp[amt] = Math.min(dp[amt], dp[amt-coin]+1);
                    //dp[amt - coin] → coins needed to make the remaining amount
                    ///+1 → for the coin you're using now
                }
            }
        }
         // If dp[amount] is still "infinity", it means we can't form the amount
        return dp[amount] > amount ? -1 : dp[amount];
    }
}

//Space Optimization Not needed
//dp[i] = Math.min(dp[i], dp[i - coin] + 1);
//This update only relies on previous values from the same 1D array, not from a prior "row."
//We only need one previous state in Coin Change

//So there's no need for separate prev[] and curr[] arrays like in 2D DP problems.


2D:
//Recursion
//TC = O(2^n) - TLE
//SC = O(n)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int res = coinChangeCombo(n-1, coins, amount);
        return res == Integer.MAX_VALUE ? -1 : res;
    }

    public int coinChangeCombo(int ind, int[] coins, int amount){
        //base case
        if(amount == 0){
            return 0;
        }
        if(ind == 0){
            if (amount % coins[0] == 0) {
                return amount / coins[0];
            } else {
                return Integer.MAX_VALUE;
            }
        }
        
        int pickCoin = Integer.MAX_VALUE;
        int notPickCoin = coinChangeCombo(ind-1, coins, amount);
        if(coins[ind] <= amount ){
            // pickCoin = 1 + coinChangeCombo(ind, coins, amount-coins[ind]);
            // the above can cause integer overflow if the recursive call returns Integer.MAX_VALUE. Adding 1 to it wraps it around to a negative number.
            int res = coinChangeCombo(ind, coins, amount-coins[ind]);
            if(res != Integer.MAX_VALUE)
                pickCoin = 1 + res;
        }
        return Math.min(pickCoin, notPickCoin);
    }
}

// Memoization
//TC = O(n * amount)
//SC =  O(n) + O(n × amount)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n+1][amount+1];
        for(int i = 0; i < n; i++){
            for(int j = 0; j <= amount; j++){
                dp[i][j] = -1;
            }
        }
        int res = coinChangeCombo(n-1, coins, amount, dp);
        return res == Integer.MAX_VALUE ? -1 : res;
    }

    public int coinChangeCombo(int ind, int[] coins, int amount, int[][] dp){
        //base case
        if(amount == 0){
            return 0;
        }
        if(ind == 0){
            if (amount % coins[0] == 0) {
                return amount / coins[0];
            } else {
                return Integer.MAX_VALUE;
            }
        }
        if(dp[ind][amount] != -1){
            return dp[ind][amount];
        }
        
        int pickCoin = Integer.MAX_VALUE;
        int notPickCoin = coinChangeCombo(ind-1, coins, amount, dp);
        if(coins[ind] <= amount ){
            // pickCoin = 1 + coinChangeCombo(ind, coins, amount-coins[ind]);
            // the above can cause integer overflow if the recursive call returns Integer.MAX_VALUE. Adding 1 to it wraps it around to a negative number.
            int res = coinChangeCombo(ind, coins, amount-coins[ind], dp);
            if(res != Integer.MAX_VALUE)
                pickCoin = 1 + res;
        }
        return dp[ind][amount] = Math.min(pickCoin, notPickCoin);
    }
}

// Tabulation
//TC = O(n * amount)
//SC =  O(n × amount)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n+1][amount+1];
        
        //base case
        //during initialization]
        for(int amt = 0; amt <= amount; amt++){
            if (amt % coins[0] == 0) {
                dp[0][amt] =  amt / coins[0];
            } else {
                dp[0][amt] =  Integer.MAX_VALUE;
            }
        }

        for(int ind = 1; ind < n; ind++){
            for(int amt = 0; amt <= amount; amt++){
                int pickCoin = Integer.MAX_VALUE;
                int notPickCoin = dp[ind-1][amt];
                if(coins[ind] <= amount ){
                    // pickCoin = 1 + coinChangeCombo(ind, coins, amount-coins[ind]);
                    // the above can cause integer overflow if the recursive call returns Integer.MAX_VALUE. Adding 1 to it wraps it around to a negative number.
                    if (amt - coins[ind] >= 0) {
                        int res = dp[ind][amt-coins[ind]];
                        if(res != Integer.MAX_VALUE)
                            pickCoin = 1 + res;
                    }
                }
                dp[ind][amt] = Math.min(pickCoin, notPickCoin);

            }
        }

        int res = dp[n-1][amount];
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}

//Space Optimization
//TC = O(n)
//SC = O(1)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[] prev = new int[amount+1];
        int[] curr = new int[amount+1];        
        //base case
        for(int amt = 0; amt <= amount; amt++){
            if (amt % coins[0] == 0) {
                prev[amt] =  amt / coins[0];
            } else {
                prev[amt] =  Integer.MAX_VALUE;
            }
        }

        for(int ind = 1; ind < n; ind++){
            for(int amt = 0; amt <= amount; amt++){
                int pickCoin = Integer.MAX_VALUE;
                int notPickCoin = prev[amt];
                if(coins[ind] <= amount ){
                    // pickCoin = 1 + coinChangeCombo(ind, coins, amount-coins[ind]);
                    // the above can cause integer overflow if the recursive call returns Integer.MAX_VALUE. Adding 1 to it wraps it around to a negative number.
                    if (amt - coins[ind] >= 0) {
                        int res = curr[amt-coins[ind]];
                        if(res != Integer.MAX_VALUE)
                            pickCoin = 1 + res;
                    }
                }
                curr[amt] = Math.min(pickCoin, notPickCoin);
            }
            prev = curr;
        }

        int res = prev[amount];
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}

