https://leetcode.com/problems/climbing-stairs/description/

https://www.youtube.com/watch?v=mLfjzJsN8us

Approach - DP - Recursion -> Memoization -> Tabulation -> Space optimization

class Solution {
    public int climbStairs(int n) {
        //Recursion // TLE
        //return climbing(n);

        //Memoization // TC = O(n), SC = O(n) + O(n) - recursion stack space + dp array
        /*int[] dp = new int[n+1];
        for(int i = 0; i < n+1; i++){//dp.length = n+1
            dp[i] = -1;
        }
        return climbing(n, dp);*/

        //Tabulation - no recursion(single method) // TC = O(n), SC = O(n) - dp array
        /*int[] dp = new int[n+1];
        dp[0] = dp[1] = 1;//base case - // One way to stay at ground level or reach the first step
        for(int i = 2; i <= n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];*/

        //Space Optimization // TC = O(n), SC = O(1) 
        int prev = 1;
        int prev2 = 1;
        for(int i = 2; i <=n; i++){
            int curr = prev + prev2;
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }

    //Recursion
    /*public int climbing(int n){
        //base
        if(n == 0 || n == 1)
            return 1;

        int step1 = climbing(n-1);
        int step2 = climbing(n-2);

        return step1+step2;
    }*/

    //Memoization
    /*public int climbing(int n, int[] dp){
        if(n == 0 || n == 1){
            return 1;
        }
        if(dp[n] != -1){
            return dp[n];
        }

        return dp[n] = climbing(n-1, dp) + climbing(n-2, dp);
    }*/
}
