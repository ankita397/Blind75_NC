//https://leetcode.com/problems/group-anagrams/description/

//https://www.youtube.com/watch?v=Fpedl1ZCSZk

//Input: strs = ["eat","tea","tan","ate","nat","bat"]
//Output: [["bat"],["nat","tan"],["ate","eat","tea"]]


//Optimal 1 : Sort each word acc to characters — if two words have the same sorted form, they are anagrams, so we put them in the same group.
//TC = O(n * klogk) - sorting is done
//SC = O(n*k)
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        
        // Loop through each word in the input array
        for (String word : strs) {
            // Convert the word to a char array to sort its characters
            char[] chars = word.toCharArray();

            // Sort the characters in the word
            Arrays.sort(chars);
            
           // Convert the sorted char array back to a string
            String sortedWord = new String(chars);

            // Example:
            // word = "eat" → chars = ['e','a','t'] → sorted = ['a','e','t'] → sortedWord = "aet"
            // word = "tea" → sortedWord = "aet"
            // word = "tan" → sortedWord = "ant"
            
            if (!map.containsKey(sortedWord)) {
                map.put(sortedWord, new ArrayList<>());
            }
            
            map.get(sortedWord).add(word);
        }
        
        return new ArrayList<>(map.values());
    }
}

//Optimal 2: for each of 26 chars, use count of each char in each word. Use StringBuilder to create unique hash that acts as key of map 
//and value will be the list of anagrams

//TC : O(NK) ; N = length of strs array , K = max length of a string in strs
//SC : O(NK)

class Solution { 
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        for(String word : strs){//eat / tea / tan /ate
            int[] freq = new int[26];
            for(char ch : word.toCharArray()){
                freq[ch - 'a']++;// get freq of each letter in the words
            }
            StringBuilder sb = new StringBuilder(); // used to construct a hash to be used as key for map
            for(int count : freq){
                sb.append("#"); // '#' is added for this kind of example - ["aaaaaaaaaaab","abbbbbbbbbbb"] - both freq arrays will be same ([11,1,0,0...] & [1,11,0,0...]). 
                //So both the strings will be same [11100000...],[111,00000...]. But both strings are not anagrams of each other.
                //So to differentiate, we add '#'.
                //After adding #, our key strings will be [#11#1#0#0#...], [#1#11#0#0#...]. Now we get different hash keys.
                sb.append(count);
            }
            String key = sb.toString();//hash1 / hash1 / hash2 / hash1
            if(!map.containsKey(key)){
                map.put(key,new ArrayList<String>());//{"hash1" : []} / not enter here for 'tea' since hash will be same(hash1) / {"hash2" : []} /not enter here for 'ate' since hash will be same(hash1)
            }
            map.get(key).add(word);//{"hash1" : ["eat"]} /
                                    //{"hash1" : ["eat", "tea"]} /
                                    //{"hash2" : ["tan"]} /
                                    //{hash1} : ["eat", "tea", "ate"]}
            //after all loops - 
            //map = {"hash1" : ["eat", "tea", "ate"], "hash2": ["tan","nat"] , "hash3": ["bat"]}
        }
        //take all values in the map and add to array list
        return new ArrayList(map.values());
    }
}
