https://leetcode.com/problems/longest-consecutive-sequence/description/

//https://www.youtube.com/watch?v=oO5uLE7EUlM&list=PLgUwDviBIf0oF6QL8m22w1hIDC1vJ_BHz&index=29

//Brute Force - O(nlog(n))
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int csLen = 0; // length of each consecutive seq that we find
        int max = 1; // LCS length
        int last_smaller = Integer.MIN_VALUE; // previous smaller element which is a part of our subsequence 
        // Eg : [1,0,2,1] -> [0,1,1,2] 

        Arrays.sort(nums);
        for(int i=0; i < nums.length; i++){
            if(nums[i]-1 ==last_smaller ){// For above example, when i = 1, nums[i] - 1 = 1 - 1 = 0 => 0 has to be the last_smaller for nums[i] to be part of our seq
                csLen++;
                last_smaller = nums[i];        
            }if(nums[i] != last_smaller ){// this is the start of new seq
                csLen = 1;
                last_smaller = nums[i]; 
            }  
            if(csLen > max) // calculate the max of all consecutive seq that we find
                max = csLen;  
        }   
        return max;
    }
}

//Optimal 
//Approach : HashSet
//Here, we find the first element of every consecutive seq and check for first_element+1 in the set
//TC = O(N) + O(2*N) ~ O(3*N), where N = size of the array.
Reason: O(N) for putting all the elements into the set data structure. After that for every starting element, 
we are finding the consecutive elements. Though we are using nested loops, the set will be traversed at most twice in the worst case. 
So, the time complexity is O(2*N) instead of O(N2).
//SC: O(N), as we are using the set data structure to solve this problem.
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int max = 1;
        //add all elements to set
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i < nums.length; i++){
            set.add(nums[i]);
        }

        //Loop over the set to find the longest consecutive seq
        for(int element : set){
            //if element is the first one in out seq, the element-1 will not be a part of the set
            //eg : [1,2,4,5,6] - [1,2] and [4,5,6] are the 2 seqs
            //For 1 and 4 to be first elements in their resp seqs, 0 and 3 should not be there in the set
            if(!set.contains(element-1)){//first element of a seq
                // first element found and count started
                int csLen = 1;
                int cs_element = element;//first element of the consecutive seq
                //For [4,5,6] , here cs_element = 4
                //Check if 4+1=5 is present in set => modify cs_element = 5 and increment count 
                //Check if 5+1=6 is present in set => modify cs_element = 6 and increment count
                //Check if 6+1=7 is present in set => not present = out of loop
                while(set.contains(cs_element+1)){// rest of the elements of the consecutive seq
                    cs_element = cs_element+1;
                    csLen++;
                }
                max = Math.max(max, csLen);// LCS
            }
        }
        return max;
    }
}
