https://leetcode.com/problems/maximum-subarray/description/

https://www.youtube.com/watch?v=AHZpyENo7k4


//Brute Force
//TC = O(n^3)
//SC = O(1)
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++){
            for(int j = i; j < nums.length; j++){
                int sum = 0;
                for(int k = i; k <= j; k++){ //loop to calculate the sum of subarray from i to j
                    sum = sum + nums[k];
                }
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}

//Better
//TC = O(n^2)
//SC = O(1)
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++){
            int sum = 0;// Adds elements starting from i
            for(int j = i; j < nums.length; j++){
                sum += nums[j]; // Add current element to the sum and extend the subarray instead of adding overlapping subarrays repeatedly
                max = Math.max(sum, max);
            }
        }
        return max;
    }
}

//Optimal - Kadane's algorithm
//TC = O(n)
//SC = O(1)
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];

            if(sum > max){
                max = sum;
            }

            if(sum < 0){
                sum = 0;
            }

            //Note: In some cases, the question might say to consider the sum of the empty subarray while solving this problem.
            // if(max < 0) 
            //     max = 0;

        }
        return max;
    }
}


//Follow up - if asked to print the subarray
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;  // Maximum subarray sum found so far
        int sum = 0;                  // Current running sum of the subarray

        int start = 0;      // Potential start of the subarray
        int maxStart = 0;   // Start index of the max sum subarray
        int maxEnd = 0;     // End index of the max sum subarray

        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];  // Add current element to running sum

            // Update max if the current sum is greater and track the subarray's start/end
            if (sum > max) {
                max = sum;
                maxStart = start;  // `start` is where the subarray begins (how it was last reset/extended)
                maxEnd = i;        // `i` marks the endpoint of the subarray with max sum
            }

            // If sum drops below 0, reset sum and start a new subarray
            if (sum < 0) {
                sum = 0;
                start = i + 1;  // Start a new subarray from the next index - everytime sum is reset, we get a new start
            }
        }

        // Print the maximum subarray
        System.out.print("Max Subarray: [");
        for (int k = maxStart; k <= maxEnd; k++) {
            System.out.print(nums[k]);
            if (k < maxEnd) System.out.print(", ");
        }
        System.out.println("]");

        return max;  // Return the maximum subarray sum
    }
}
