https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

https://www.youtube.com/watch?v=-zSxTJkcdAo

//brute force - using Set(ignore)
//Generate all substrings and get the max length
//keep i constant and move j to right till we encounter a repeating char in our hashSet

//TC = O(n^2) // O(n*n*1) - O(1) for for accessing set
//O(n) // set will have size n if all characters are unique in the string
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLen = 0;

        if(n == 0)
            return 0;

        //try every possible starting index 'i'
        for(int i = 0; i < n; i++){
            Set<Character> set = new HashSet<Character>();
            //extend the substring from index 'i' to 'j'
            for(int j = i; j < n; j++){
                char c = s.charAt(j);
                // If the character is already in the set, we found a repeat
                if(set.contains(c)){
                    break;
                }
                // Add the unique characters only to the set
                set.add(c);
                //update maxLen
                maxLen = Math.max(maxLen, j - i + 1);
            }
        }
        return maxLen;
    }
}

//brute force - using visited array (best)
//Generate all substrings and get the max length
//keep i constant and move j to right till we encounter a repeating char in our freq array

//TC = O(n^2)// O(n*n*1) - O(1) for for accessing array
//O(256)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLen = 0;
        for(int i =0; i < n; i++){
            //Set<Character> set = new HashSet<Character>();
            int[] visited = new int[256];
            for(int j = i; j < n; j++){
                int length = j-i+1;
                if(visited[s.charAt(j)] == 1){// already encountered this character
                    break;
                }
                maxLen = Math.max(maxLen, length);
                visited[s.charAt(j)] = 1; // mark it a seen before - so it will become repeating char next time
            }
        }
        return maxLen;
    }
}

//Better but slow (Interviewers do not prefer this)
//TC = O(n)
//SC = O(n) // set will have size n if all characters are unique in the string

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLen = 0;
        int left = 0;
        int right = 0;
        Set<Character> set = new HashSet<>();

        if(n == 0)
            return 0;

        //Expand the window by moving 'right' pointer
        while(right < n){
            char c = s.charAt(right);

            // If character 'c' not in set, add it and update maxLen
            if(!set.contains(c)){
                set.add(c);
                maxLen = Math.max(maxLen, right -  left + 1);
                right++;
            }else{
                // If 'c' is duplicate, shrink window from the left
                // Remove character at 'left' and move left pointer forward
                set.remove(s.charAt(left));
                left++;
            }
        }
        return maxLen;
    }
}

//Optimal approach : Sliding window with 2 pointers (best)
//using array for storing each character's index

//TC = O(n)
//SC = O(256)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int len = s.length();
        int left = 0;
        int right = 0;
        int maxLen = 0;
        int[] charIndex = new int[256];//<Character's last seen position>
        for(int i = 0; i < charIndex.length; i++){
            charIndex[i] = -1;
        }
        //right pointer moving out of the array is where we stop 
        while(right < len){
            //char currentChar = s.charAt(right);
            //only when repeating character is seen and it is after left, move left
            if(charIndex[s.charAt(right)] != -1 &&  charIndex[s.charAt(right)] >= left){
                // Move left to avoid repeating character
                // Eg: in cadbzabcd, for substring "cadbza" where right = 'a'(index 5), we found 'a' repeating
                // so, we need to move left beyond charIndex[s.charAt(right)] 
                // left = charIndex[s.charAt(right)]+1 -- i.e; left = 1+1=2
                // this lets us skip left at index 1 where we have a first.
                left = charIndex[s.charAt(right)]+1;
            }
            //update last seen position of the repeated character in the map to current position
            charIndex[s.charAt(right)] = right;
            // Calculate the length of the current substring
            maxLen = Math.max(maxLen, right-left+1);
            //move right to next character
            right++;  
        }
        return maxLen;
    }
}

//Optimal approach : Sliding window with 2 pointers (skip)
//using hashmap for storing <character,index>

//TC = O(n)
//SC = O(n)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int len = s.length();
        int left = 0;
        int right = 0;
        int maxLen = 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();//<Character, last seen position>
        //right pointer moving out of the array is where we stop 
        while(right < len){
            char currentChar = s.charAt(right);
            //only when repeating character is seen and it is after left, move left
            if(map.containsKey(currentChar) && map.get(currentChar) >= left){
                // Move left to avoid repeating character
                left = map.get(currentChar)+1;
            }
            //update last seen position of the repeated character in the map
            map.put(currentChar,right);
            // Calculate the length of the current substring
            maxLen = Math.max(maxLen, right-left+1);
            //move right to next character
            right++;  
        }
        return maxLen;
    }
}
