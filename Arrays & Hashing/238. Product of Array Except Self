//https://www.youtube.com/watch?v=G9zKmhybKBM
https://leetcode.com/problems/product-of-array-except-self/solutions/1342916/3-minute-read-mimicking-an-interview/
//Eg: i/p = [2, 1, 3, 4]
//left = [1, 2, 2, 6]
//right = [12,12,4,1]
//ans = [12,24,8,6]

//TC = O(n)
//SC = O(n)
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] leftSubArrayProd = new int[n];
        int[] rightSubArrayProd = new int[n];
        leftSubArrayProd[0]= 1;
        rightSubArrayProd[n-1] = 1;
        for(int i = 1; i < nums.length; i++){
            leftSubArrayProd[i] = leftSubArrayProd[i-1] * nums[i-1];
        }
        for(int i = n-2; i >=0; i--){
            rightSubArrayProd[i] = rightSubArrayProd[i+1] * nums[i+1];
        }
        for(int i = 0; i < nums.length; i++){
            nums[i] = leftSubArrayProd[i] * rightSubArrayProd[i];
        }
        return nums;
    }
}


//Little Different - Keep left products in output array and right products in variable
//Left Products: You need the cumulative product for all previous indices, so you need to store intermediate results in the output array.
//Right Products: You can maintain a running product in a single variable because you’re moving backwards through the array, allowing you to update it directly.
class Solution { //TC = O(n) and SC = O(1)
    public int[] productExceptSelf(int[] nums) {
        int[] output = new int[nums.length];
        output[0] = 1;
        for(int i = 1; i < nums.length; i++){// use output array for all left products
           output[i] = nums[i-1] * output[i-1];
           //System.out.println("Left :"+ output[i]);
        }
        
        int right_products  = 1;
        for(int i = nums.length-1; i >= 0; i--){// use variable for all right products
          output[i] = output[i] * right_products;
          right_products = right_products * nums[i]; // when calculating the right products, 
//we can use a single variable (right_products) because we’re processing the array in reverse.
          //System.out.println("Right :"+ output[i]);
        }

        return output;
    }
}

