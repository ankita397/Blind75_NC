//https://leetcode.com/problems/3sum/description/
//https://www.youtube.com/watch?v=DhFh8Kw7ymk&t=1186s
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        
        for(int i = 0; i < n; i++){
            //remove duplicates
            //for i = 0, there will be no previous value of nums[i] to remove duplicate of
            if(i > 0 && nums[i] == nums[i-1]){
                continue;//ignore duplicate and do not proceed further; continue the loop
            }
            //move the points j and k
            int j = i + 1;
            int k = n - 1;

            while(j < k){// do this till j and k donâ€™t cross each other
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0){// we need to go towards right since nums is sorted
                    j++;
                }else if(sum > 0){// we need to go towards left since nums is sorted
                    k--;
                }else{//sum == 0 - we have found one triplet
                    List<Integer> triplet = Arrays.asList(nums[i],nums[j], nums[k]);
                    res.add(triplet);
                    //after adding triplet to main list, move j and k
                    j++;
                    k--;
                    //keep moving j and k till their values are same so that we do not end up with same triplets again and again
                    while(j < k && nums[j] == nums[j-1]){
                        j++;
                    }
                    while(j < k && nums[k] == nums[k+1]){
                        k--;
                    }
                }
            }
        }
        return res;
    }
}
