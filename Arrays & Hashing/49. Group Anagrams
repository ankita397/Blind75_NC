//https://leetcode.com/problems/group-anagrams/description/
//https://www.youtube.com/watch?v=Fpedl1ZCSZk

//Input: strs = ["eat","tea","tan","ate","nat","bat"]
//Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

//for each of 26 chars, use count of each char in each word. Use StringBuilder to create unique hash that acts as key of map 
//and value will be the list of anagrams

//TC : O(NK) ; N = length of strs array , K = max length of a string in strs
//SC : O(N)

class Solution { 
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        for(String word : strs){//eat / tea / tan /ate
            int[] freq = new int[26];
            for(char ch : word.toCharArray()){
                freq[ch - 'a']++;// get freq of each letter in the words
            }
            StringBuilder sb = new StringBuilder(); // used to construct a hash to be used as key for map
            for(int count : freq){
                sb.append("#"); // '#' is added for this kind of example - ["aaaaaaaaaaab","abbbbbbbbbbb"] - both freq arrays will be same ([11,1,0,0...] & [1,11,0,0...]). 
                //So both the strings will be same [11100000...],[111,00000...]. But both strings are not anagrams of each other.
                //So to differentiate, we add '#'.
                //After adding #, our key strings will be [#11#1#0#0#...], [#1#11#0#0#...]. Now we get different hash keys.
                sb.append(count);
            }
            String key = sb.toString();//hash1 / hash1 / hash2 / hash1
            if(!map.containsKey(key)){
                map.put(key,new ArrayList<String>());//{"hash1" : []} / not enter here for 'tea' since hash will be same(hash1) / {"hash2" : []} /not enter here for 'ate' since hash will be same(hash1)
            }
            map.get(key).add(word);//{"hash1" : ["eat"]} /
                                    //{"hash1" : ["eat", "tea"]} /
                                    //{"hash2" : ["tan"]} /
                                    //{hash1} : ["eat", "tea", "ate"]}
            //after all loops - 
            //map = {"hash1" : ["eat", "tea", "ate"], "hash2": ["tan","nat"] , "hash3": ["bat"]}
        }
        //take all values in the map and add to array list
        return new ArrayList(map.values());
    }
}
