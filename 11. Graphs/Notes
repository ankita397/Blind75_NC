#If array list is given - ArrayList<ArrayList<Integer>> edges

boolean[] vis = new boolean[n];
List<ArrayList<Integer>> adj = new ArrayList<>();
for(int i = 0; i < n; i++){
    adj.add(new ArrayList<Integer>());
}
for(int i = 0; i < m; i++){//undirected graph
    adj.get(edges.get(i).get(0)).add(edges.get(i).get(1)); //u to v
    adj.get(edges.get(i).get(1)).add(edges.get(i).get(0));//v to u
}

#If array is given - int[][] edges

boolean vis[] = new boolean[n];
ArrayList<ArrayList<Integer>> adj = new ArrayList<>(n);
 for (int i = 0; i < n; i++) {
    adj.add(new ArrayList<>());
}

for(int i=0; i<m; i++){
    adj.get(edges[i][0]).add(edges[i][1]);
    adj.get(edges[i][1]).add(edges[i][0]);
}


//DFS

void dfs( ArrayList<ArrayList<Integer>> adj, boolean vis[], int node)
{
    vis[node] =true;
    for(int neighbor : adj.get(node)){
        if(!vis[neighbor]){
                cnt++;
               dfs(adj,vis, neighbor);
            }
    }
}

//BFS

int st=0;
Queue<Integer> q = new LinkedList<>();
vis[node]=true;
q.add(node);
while(!q.isEmpty()){
    int curr=q.poll();
    for(int neighbor : adj.get(curr)){
        if(!vis[neighbor]){
            vis[neighbor] = true;
            cnt++;
            q.add(nei);
        }
    }
}


//Topological sort

// Method to perform Topological Sort
public static List<Integer> topologicalSort(int V, List<List<Integer>> adj) {
    // Array to store in-degrees of all vertices
    int[] inDegree = new int[V];
    
    // Calculate in-degree for each vertex
    for (int i = 0; i < V; i++) {
        for (int neighbor : adj.get(i)) {
            inDegree[neighbor]++;
        }
    }
    
    // Queue for vertices with in-degree 0 (no incoming edges)
    Queue<Integer> queue = new LinkedList<>();
    
    // Add vertices with in-degree 0 to the queue
    for (int i = 0; i < V; i++) {
        if (inDegree[i] == 0) {
            queue.add(i);
        }
    }
    
    // List to store the topologically sorted order
    List<Integer> topoOrder = new ArrayList<>();
    
    // Process the graph
    while (!queue.isEmpty()) {
        int current = queue.poll();
        topoOrder.add(current);
        
        // Reduce the in-degree of neighbors
        for (int neighbor : adj.get(current)) {
            inDegree[neighbor]--;
            
            // If in-degree becomes 0, add it to the queue
            if (inDegree[neighbor] == 0) {
                queue.add(neighbor);
            }
        }
    }
    
    // If there was a cycle, topological sort isn't possible
    if (topoOrder.size() != V) {
        System.out.println("The graph has a cycle, topological sort not possible.");
        return new ArrayList<>();
    }
    
    return topoOrder;
}
