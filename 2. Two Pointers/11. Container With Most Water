//https://leetcode.com/problems/container-with-most-water/description/

//Input: height = [1,8,6,2,5,4,8,3,7]
//Output: 49
//Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

//Optimal Approach - Two pointers

//TC = O(n)
//SC = O(1)
class Solution {
    public int maxArea(int[] height) {
        int length = height.length;
        int left = 0;
        int right = length - 1;
        int area = 0;
        while(left < right){
        //we have calculate to calculate area according the lesser height for y axis
        //and right - left for x axis
            if(height[left] < height[right]){ // height[left] is lesser 
                area = Math.max(area, height[left] * (right-left));
                left++;
            }else{ // height[right] is lesser 
                area = Math.max(area, height[right] * (right-left));
                right--;
            }
        }
        return area;
    }
}
