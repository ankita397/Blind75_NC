https://leetcode.com/problems/merge-two-sorted-lists/description/

https://www.youtube.com/watch?v=jXu-H7XuClE

//Brute Force

//TC = O(N1 + N2) + O(N log N) + O(N) 
//SC = O(N)+O(N) where N is the total number of nodes from both lists, N1 + N2. O(N) to store all the nodes of both the lists in an 
//external array and another O(N) to create a new combined list.

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ArrayList<Integer> arrList = new ArrayList<Integer>();
        ListNode temp1 = list1, temp2 = list2;
        //Add the nodes of both linked lists to an array list
        while(temp1 != null){//O(N1)
            arrList.add(temp1.val);
            temp1 = temp1.next;
        }
        while(temp2 != null){//O(N2)
            arrList.add(temp2.val);
            temp1 = temp2.next;
        }

        //Sort the array list
        Collections.sort(arrList);//O(NlogN) - N = N1+N2

        //Convert the sorted array list into linked list
        ListNode node = convertArrListToLinkedList(arrList);//O(N)

        return node;
    }

    //Common method to Convert the array list into linked list
    private ListNode convertArrListToLinkedList(ArrayList<Integer> arrList){
        // Create a dummy node to serve as the dummy head of the linked list
        ListNode dummyNode = new ListNode(-1);
        ListNode temp = dummyNode;

        // Iterate through the array and create nodes with array elements
        for(int i = 0; i < arrList.size(); i++){
            // Create a new node with the array element
            temp.next = new ListNode(arrList.get(i));
            // Move the temporary pointer to the newly created node
            temp = temp.next;
        }
        // Return the linked list starting from the next of the dummy node
        return dummyNode.next;   
    }
}

//Optimal

- Since this problem requires creation of a new list - use the concept of dummyNode
- Use property of "sorted"
- No need to create another linked list - just change the links in existing 2 linked lists

//TC = O(N1+N2)
//SC = O(1) - We just use the existing linked lists and link them in sorted manner. No extra space is used

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Create a dummy node to serve as the head of the merged list
        ListNode dummyNode = new ListNode(-1);
        ListNode temp = dummyNode; //to traverse and link

        // Traverse both lists simultaneously
        while(list1 != null && list2 != null){
            // Compare elements of both lists and link the smaller node to the merged list
            if(list1.val < list2.val){
                temp.next = list1;
                list1 = list1.next;
            }else{
                temp.next = list2;
                list2 = list2.next;
            }
            // Move the temporary pointer to the next node - traverse
            temp = temp.next;
        }
        // Either list1 has nodes left or list2 has nodes left
        // If any list still has remaining elements, append them to the merged list
        if(list1 != null){
            temp.next = list1;
        }else if(list2 != null){
            temp.next = list2;
        }
        // Return the merged list starting from the next of the dummy node since dummy node is not that actual head.. second node is the actual start of the linked list
        return dummyNode.next;
    }
