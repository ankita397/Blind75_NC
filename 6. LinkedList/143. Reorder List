https://leetcode.com/problems/reorder-list/description/

//Brute Force - iterative - 2 pointers
//TC = O(n)
//SC = O(n) - arrayList

class Solution {
    public void reorderList(ListNode head) {
        if(head == null){
            return;
        }
        List<ListNode> nodeList = new ArrayList<ListNode>();
        ListNode temp = head;//temp is current node - used to traverse
        while(temp != null){//traverse the linked lust and add the nodes to the array list
            nodeList.add(temp);
            temp = temp.next;
        }
        int i = 0; //i is used to traverse from the front of LL
        int j = nodeList.size()-1;//j is used to traverse from the back of LL
        while(i < j){
            nodeList.get(i).next = nodeList.get(j);
            i++;
            if(i >= j){// i may exceed j when we increment it
                break;
            }
            nodeList.get(j).next = nodeList.get(i);
            j--;
        }
        nodeList.get(i).next = null;//the last node should point to null
    }
}

//Recursive - Skip as iterative(above solution) is more intuitive and both take same time and space complexity

//Optimal -  Reverse And Merge

//TC = O(n)
//SC = O(1)

class Solution {
    public void reorderList(ListNode head) {
        // Base case: If the list is empty or has only one node, no reordering is needed.
        if (head == null || head.next == null) {
            return;
        }

        // Step 1: Find the middle of the linked list using the slow and fast pointer technique.
        // Slow pointer moves one step, and fast pointer moves two steps at a time.
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) { // if LL has even no of nodes, then 1st condition will be executed and if LL has odd 
        // no of nodes, the 2ns condition will get executed
            slow = slow.next;       // Move slow pointer by 1 step
            fast = fast.next.next;   // Move fast pointer by 2 steps
        }
        // After the loop, 'slow' will be at the middle of the linked list.

        // Step 2: Reverse the second half of the linked list starting from the middle node.
        ListNode secondHalfStart = slow; // Middle node, starting point for reversing
        ListNode prev = null;
        while (secondHalfStart != null) {
            ListNode temp = secondHalfStart.next; // Temporarily store the next node
            secondHalfStart.next = prev;          // Reverse the current node's pointer
            prev = secondHalfStart;               // Move 'prev' to current node
            secondHalfStart = temp;               // Move to the next node in the original order
        }
        // Now 'prev' is the head of the reversed second half of the list.

        // Step 3: Merge the two halves.
        ListNode first = head;   // Start from the head of the first half
        ListNode second = prev;  // Start from the head of the reversed second half
        while (second.next != null) {  // Continue merging until reaching the end of the second half
            ListNode temp1 = first.next;  // Temporarily store the next node in the first half
            ListNode temp2 = second.next; // Temporarily store the next node in the second half

            first.next = second;  // Link current node of first half to current node of second half
            second.next = temp1;  // Link current node of second half to the next node in the first half

            first = temp1;        // Move to the next node in the first half
            second = temp2;       // Move to the next node in the reversed second half
        }
    }
}

