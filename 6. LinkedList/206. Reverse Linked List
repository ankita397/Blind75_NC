https://leetcode.com/problems/reverse-linked-list/description/

//Iterative approach

//TC = O(n+n)
//SC = O(n)

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode temp = head;
        Stack<Integer> stack = new Stack();
        while(temp != null){// push all the values to a stack
            stack.push(temp.val);
            temp = temp.next;
        }
        temp = head;//make temp as head again
        while(temp != null){
            // temp.val = stack.peek();
            // stack.pop();
            temp.val = stack.pop();//and get the values from stack for temp. These values will come reversed since stack follows LIFO
            temp = temp.next;
        }
        return head;
    }
}

//Iterative approach - better

//TC = O(n)
//SC = O(1)

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;// prev should be initialized to null since after reversing it will be the last node
        while(curr != null){
            ListNode temp = curr.next; //Store the next node in 'temp' to preserve the reference
            curr.next = prev; //Reverse the direction of the current node's 'curr' pointer to point to 'prev'
            prev = curr;//Move 'prev' to the current node for the next iteration
            curr = temp;//Move 'curr' to the 'temp' node advancing the traversal
        }
        return prev; //prev will have the new head of the reversed linked list
    }
}

//Recursive 

//TC = O(n)
//SC = O(n) - recursion stack space

class Solution {
    public ListNode reverseList(ListNode head) {
        // base case
        // If the linked list is empty or has only one node,
        // return the head as it is already reversed.
        if(head == null || head.next == null){// if single node is there
            return head;
        }
        // Reverse the linked list starting
        // from the second node (head.next).
        ListNode newHead = reverseList(head.next); //solve for the next node recursively
        // Save a reference to the node following the current 'head' node in 'next'.
        ListNode next = head.next;
        // Make the 'next' node point to the current 'head' node in the reversed order.
        next.next = head;
        // Make the 'head' node point to null to denote it as last node and break the link from the current 'head' node to the 'next' node to avoid cycles.
        head.next = null;

        // Return the 'newHead,' which is the new head of the reversed linked list.
        return newHead;
    }
}
