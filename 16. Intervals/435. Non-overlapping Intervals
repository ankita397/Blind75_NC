https://leetcode.com/problems/non-overlapping-intervals/description/
https://leetcode.com/problems/non-overlapping-intervals/solutions/3785409/beat-s-100-c-java-python-beginner-friendly


//TC = O(nlogn)
//SC = O(1)
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int n = intervals.length;
        if(n == 0)
            return 0;
        //Sort intervals by end time
        Arrays.sort(intervals, (a,b) -> a[1] - b[1]);
        // Example: intervals = [[1,2],[1,3],[2,3],[3,4]]
        // After sorting by end time: [[1,2],[1,3],[2,3],[3,4]]
        // We sort by end time so that we iterate through and always keep the interval that ends earliest (non-overlapping). This ensures we can fit in as many non-overlapping intervals as possible. 

        int countRemovals = 0;
        int prevEnd = intervals[0][1];// Initialize end of first interval (prevEnd = 2)
       
        for(int i = 1; i < n; i++){
            // If current interval starts before the previous one ends, it's overlapping
            if(intervals[i][0] < prevEnd){
                countRemovals++;
            // No need to update prevEnd, since we keep the interval with smaller end time
            }else{
                // No overlap, so we can include this interval and just update its prevEnd to current interval's end time
                prevEnd = intervals[i][1];
            }
        }
        return countRemovals;
    }
}
