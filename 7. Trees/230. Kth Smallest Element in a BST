https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/

https://www.youtube.com/watch?v=9TJYWh0adfk
https://takeuforward.org/data-structure/kth-largest-smallest-element-in-binary-search-tree/

//Brute Force - use list and sorting

//TC = O(n) + O(nlog n) - node traversal and sorting
//SC = O(n) - list

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> nodeList = new ArrayList<Integer>();
        dfs(root,nodeList);
        Collections.sort(nodeList);
        return nodeList.get(k-1);//list will be 0-indexed and k will be acc to 1-indexed
    }

    private void dfs(TreeNode root, List<Integer> nodeList){
        //Base case
        if(root == null){
            return;
        }

        nodeList.add(root.val);
        dfs(root.left, nodeList);
        dfs(root.right, nodeList);
    }
}

//Approach - INORDER TRAVERSAL FOR BST - Inorder for every BST is always sorted -> (Little better)

//TC = O(N) - in-order traversal 
//SC = O(N) - we are storing all the nodes in a list.

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> nodeList = new ArrayList<Integer>();
        inorder(root,nodeList);
        return nodeList.get(k-1);//list will be 0-indexed and k will be acc to 1-indexed
        //return nodeList.get(nodeList.size()-k)  // Kth LARGEST Element in a BST
    }

    private void inorder(TreeNode root, List<Integer> nodeList){
        //Base case
        if(root == null){
            return;
        }

        inorder(root.left, nodeList);
        nodeList.add(root.val);
        inorder(root.right, nodeList);
    }
}


//Approach - RECURSIVE INORDER TRAVERSAL FOR BST - Inorder for every BST is always sorted -> (Better)

//TC = O(N) where N is the number of nodes in the tree. In the worst case, we may visit all the nodes if k is large.
//SC = O(H) where H is the height of the tree, due to the recursion stack. 
//In a balanced tree, H would be O(log N), and in the worst case (unbalanced tree), it would be O(N).

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        // Initialize a counter to keep track of the nodes visited
        //Use a single-element array to store the maximum path sum as in Java we cannot pass primitive data types like int by reference. 
        //Only objects can be passed by reference. So array can be.
        int[] count = {0};  // Instead of this, count can be taken as a global valriable and not needed to be passed to the method.
        return inorder(root,k, count);      
    }

    private int inorder(TreeNode root, int k, int[] count){
        //Base case
        if(root == null){
            return -1;  // Base case: return -1 if no result is found in this path
        }

       // Traverse the left subtree
        int leftResult = inorder(root.left, k, count);
        if (leftResult != -1) {
            return leftResult;  // If result is found in the left subtree, return it
        }
        // Increment the counter (since we've visited this node)
        count[0]++;
        // If we've visited 'k' nodes, return the current node's value - as in inorder of BST, we traverse from lowest to highest in order
        //That's the reason we wait till the count becomes equal to k. That means the current root is our kth node. Here, count[0] = 3 means
        //the value of that root will be the 3rd highest among all the tree nodes.
        if (count[0] == k) {
            return root.val;
        }
        // Traverse the right subtree
        return inorder(root.right, k, count);
    }
}

//Optimal Approach - MORRIS TRAVERSAL(Threaded Binary Tree) -> https://www.youtube.com/watch?v=80Zug6D1_r4

//TC = O(n) - Each node is visited at most twice: once to create the thread and once to remove it.
//SC = O(1) - Morris Traversal eliminates the need for a stack or recursion.

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        TreeNode curr = root;
        int count = 0;
        while(curr != null){
            //case 1: if curr has no left, then curr is part of our inorder
            if(curr.left == null){
                count++;// Visit the node
                if(count == k){//inorder is sorted so when count equals k, that is our kth smallest
                    return curr.val;// Found the kth smallest element
                } 
                curr = curr.right; // Move to the right child
            }else{
                // Case 2: Left child exists, find the inorder predecessor (righ most in left subtree)
                TreeNode prev = curr.left;
                while(prev.right != null && prev.right != curr){
                    prev = prev.right;
                }
                // Case 2a: Thread does not exist, create it
                if(prev.right == null){
                    prev.right = curr; // Create thread
                    curr = curr.left; //Move to left child
                }
                // Case 2b: Thread exists, remove it
                else{
                    prev.right = null; // remove thread;
                    count++;// Visit the node in inorder
                    if(count == k){
                        return curr.val;// Found the kth smallest element
                    }
                    curr = curr.right;
                }
            }
        }
        // If k is larger than the number of nodes, k is invalid
        return -1;
    }
}


Note: If the question is to find the kth largest element in BST -> kth largest = (N-k) smallest where N = no of elements.
