https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/

https://www.youtube.com/watch?v=-YbXySKJsX8

Note : Use either of the below approaches as both are optimal.

//TC = O(N)
//SC = O(N)

//Approach - Level Order Traversal / BFS

public class Codec {

    // Serializes a binary tree to a string using level-order traversal.
    public String serialize(TreeNode root) {
        // If the tree is empty, return an empty string
        if (root == null)
            return "";

        // Use a queue to facilitate level-order traversal
        Queue<TreeNode> queue = new LinkedList<>();
        StringBuilder output = new StringBuilder();
        
        // Add the root node to the queue to start the traversal
        queue.add(root);
        
        // Process nodes level by level
        while (!queue.isEmpty()) {
            // Poll the front of the queue
            TreeNode node = queue.poll();

            // If the node is null, append "null" to represent a missing child
            if (node == null) {
                output.append("null ");
            } else {
                // Append the node's value to the string
                output.append(node.val + " ");
                
                // Add the left and right children of the current node to the queue
                queue.add(node.left);
                queue.add(node.right);
            }
        }
        
        // Convert the StringBuilder to a string and return it
        return output.toString();
    }

    // Deserializes the encoded data string back into the binary tree.
    public TreeNode deserialize(String data) {
        // If the input string is empty, return null (empty tree)
        if (data.equals(""))
            return null;

        // Split the input string into an array based on spaces
        String[] dataArray = data.split(" ");
        
        // The first value in the array is the root node
        TreeNode root = new TreeNode(Integer.parseInt(dataArray[0]));
        
        // Use a queue to assist in level-order reconstruction of the tree
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        int i = 1; // Start processing nodes from the second element (dataArray[1]) as we already used dataArray[0] for root
        
        // Iterate through the array and reconstruct the tree
        while (i < dataArray.length) {
            // Poll the front of the queue (current parent node)
            TreeNode parentNode = queue.poll();
            
            // Process the left child of the parent node
            if (!dataArray[i].equals("null")) {
                // Create the left child node and attach it
                TreeNode leftNode = new TreeNode(Integer.parseInt(dataArray[i]));
                parentNode.left = leftNode;
                // Add the left child to the queue for future processing
                queue.add(leftNode);
            }
            i++; // Move to the next element for the right child

            // Process the right child of the parent node
            if (i < dataArray.length && !dataArray[i].equals("null")) {
                // Create the right child node and attach it
                TreeNode rightNode = new TreeNode(Integer.parseInt(dataArray[i]));
                parentNode.right = rightNode;
                // Add the right child to the queue for future processing
                queue.add(rightNode);
            }
            i++; // Move to the next element
        }
        
        // Return the root of the reconstructed tree
        return root;
    }
}

//TC = O(N)
//SC = O(N)

//Approach - DFS (preorder) traversal.

public class Codec {

    // Serializes a binary tree to a string using DFS (preorder) traversal.
    public String serialize(TreeNode root) {
        // StringBuilder to accumulate the serialized tree as a string
        StringBuilder output = new StringBuilder();
        
        // Start DFS serialization from the root node
        dfsSerialize(root, output);
        
        // Return the resulting string which represents the serialized tree
        return output.toString();
    }

    // Helper function for DFS (preorder) traversal serialization
    private void dfsSerialize(TreeNode node, StringBuilder sb){
        // If the node is null, append "null" to the string to represent missing nodes
        if(node == null){
            sb.append("null ");
        } else {
            // Append the node's value and recursively serialize left and right children
            sb.append(node.val + " ");
            dfsSerialize(node.left, sb);  // Left child
            dfsSerialize(node.right, sb); // Right child
        }
    }

    // Deserializes the encoded data string back into the binary tree.
    public TreeNode deserialize(String data) {
        // Split the input string by spaces to get node values
        List<String> nodes = new ArrayList<>(Arrays.asList(data.split(" ")));
        
        // Start the DFS deserialization process
        return dfsDeserialize(nodes);
    }

    // Helper function to recursively rebuild the tree from the list of node values
    private TreeNode dfsDeserialize(List<String> nodes){
        // If the list is empty, we've processed all values (or reached an invalid state)
        if (nodes.isEmpty()){
            return null;
        }
        
        // Get and remove the first value from the list, which corresponds to the current node
        String currNodeVal = nodes.remove(0);
        
        // If the current value is "null", it means this node does not exist, so return null
        if (currNodeVal.equals("null")){
            return null;
        }
        
        // Otherwise, create a new node with the current value
        TreeNode node = new TreeNode(Integer.parseInt(currNodeVal));
        
        // Recursively build the left and right children of the current node
        node.left = dfsDeserialize(nodes);
        node.right = dfsDeserialize(nodes);

        // Return the current node (with its left and right subtrees already set)
        return node;
    }
}
