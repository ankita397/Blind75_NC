https://leetcode.com/problems/number-of-1-bits/description/

https://www.youtube.com/watch?v=2HWYWSgt4zU


//Approach 1

//TC = O(1)
//SC = O(1)

class Solution {

    public int hammingWeight(int n) {
        // Initialize count to 0, which will keep track of the number of set bits
        int count = 0;

        // Initialize a helper variable to represent the bit mask
        // This mask will be used to check each individual bit of the number
        int helper = 1;  // Binary: 00000000000000000000000000000001 (represents the least significant bit)

        // Loop through each of the 32 bits (since an integer is 32 bits in Java)
        for (int i = 1; i <= 32; i++) {
            // Perform bitwise AND between the helper and n
            // This checks if the current bit in n is set (i.e., 1)
            if ((helper & n) != 0) {
                // If the result is non-zero, it means the current bit is 1, so increment count
                count++;
            }

            // Left shift the helper by 1 to move to the next bit position
            // This will create a new mask for the next bit to check
            helper = helper << 1;
        }

        // Return the total count of set bits (1s) in the binary representation of n
        return count;
    }
}

//Approach 2

//TC = O(n)
//SC = O(1)

class Solution {

    public int hammingWeight(int n) {
        int count = 0;
        // While there are still set bits in n
        while (n != 0) {
            n = n & (n - 1);  // Remove the least significant set bit (right most bit)
            count++;           // Increment the set bit count
        }        
        return count;
    }    
}


